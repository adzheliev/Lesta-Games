"""
В данном модуле приводится классическая и альтернативная
(асинхронная) реализация класса по принципу FIFO.
"""
import asyncio
from typing import Any, List


class SimpleFIFO:
    """Простой FIFO класс"""
    def __init__(self, arr: List[Any] = []) -> None:
        """Инициализация инстанса класса с пустым списком в качестве дефолтного
        значения,но предусмотрена возможность передачи готовой очереди в
        качестве аргумента"""
        self.arr = arr

    def add(self, item: Any) -> None:
        """Метод добавление элементов в конец очереди, она же начало списка"""
        self.arr.append(item)
        print(f'Элемент {item} добавлен')

    def get(self) -> Any:
        """Метод извлечения самого старого элемента из очереди
        (первый элемент списка)"""
        if len(self.arr) > 0:
            return self.arr.pop(0)
        return "В очереди нет элементов"


class AsyncFIFO:
    """FIFO класс с асинхронными методами"""
    def __init__(self) -> None:
        """Инициализация инстанса класса асинхронной очередью с
        ограничением по наполнению.
        Инициализация ивента"""
        self.arr = asyncio.Queue(maxsize=10)

    async def add(self, item: Any) -> None:
        """Асинхронный метод класса для добавления элементов в конец очереди.
        Ожидает освобождения очереди, если она переполнена"""
        await self.arr.put(item)

    async def get(self) -> Any:
        """Асинхронный метод класса для извлечения самого старого элемента из очереди.
        Ожидает элемента, если очередь пустая"""
        return await self.arr.get()
